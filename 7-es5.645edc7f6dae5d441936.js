(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"8+Ho":function(e,t,n){"use strict";n.r(t);var o=n("CcnG"),a=function(){function e(){this.content=[{title:"",type:"paragraphs",data:["The two important principles with OOP in JavaScript are Object Creation patterns (Encapsulation) and Code Reuse patterns (Inheritance). When building applications, you create many objects, and there exist many ways for creating these objects: the ubiquitous object literal pattern, the prototype pattern by adding each method and property directly on the object\u2019s prototype and constructor pattern in a constructor function (Classes in other languages, but Functions in JavaScript). These two universal principles\u2014creating objects (especially from constructor Functions) and allowing objects to inherit properties and methods\u2014the main concepts with OOP in JavaScript."],subTitle:"",footerText:"",text:""},{title:"Object",type:"paragraphs",data:["As the name object-oriented suggests, objects are quite important. An object is a representation of a 'thing' (someone or something), and this representation is expressed with the help of a programming language.","The thing can be anything\u2014a real-life object, or some more convoluted concept. Taking a common object like a cat for example, it has certain characteristics (color, name, weight) and can perform some actions (meow, sleep, hide, escape). The characteristics of the object are called properties in OOP and the actions are called methods.","There is also an analogy with the spoken language: Objects are most often named using nouns (book, person), Methods are verbs (read, run), and Values of the properties are adjectives. Example, 'The black cat sleeps on my head'"],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:["const cat = { // Cat (noun) is an object <br/> &emsp;&emsp;color: 'black', // color (adjective) is a property <br/> &emsp;&emsp;where: 'on my head',<br/>&emsp;&emsp;sleeps: function() { // sleeps (verb) something to do <br/>&emsp;&emsp;// 'where' is param for the action \u201csleep\u201d method. <br/>&emsp;&emsp;return `The ${ this.color } cat sleeps ${ this.where }`; <br/>}"],subTitle:"",footerText:"",text:""},{title:"Classes",type:"paragraphs",data:["In OOP, a class is a blueprint, or recipe for an object. We can create different objects using the same class, because a class is just a template, while the objects are concrete instances, based on the template. There's a difference between JavaScript and the 'classic' object-oriented languages like C++ and Java. In JavaScript there are no classes; everything is based on objects. JavaScript has the notion of prototypes, which are also objects.","In a classic OO language, we could say something like 'create me a new object called Bob which is of class Person'. In a prototypal OO language, we should say, I'm going to take this object Person that I have lying around and reuse it as a prototype for a new object that I'll call Bob"],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:['class Bird { <br/>&emsp;&emsp;constructor (name, type) {<br/>&emsp;&emsp;this.name = name;<br/>&emsp;&emsp;this.type = type; <br/>&emsp;&emsp;this.fly = () => {<br/>&emsp;&emsp;&emsp;return this.name +" (a " + this.type + ") is flying"; <br/>&emsp;&emsp;}<br/>&emsp;}<br/>}<br/>// OR<br/>function Bird (name, type) {<br/>&emsp;&emsp;this.name = name;<br/>&emsp;&emsp;this.type = type;<br/>} <br/>Bird.prototype.fly = function() {<br/>&emsp;&emsp;// also prototypal inheritance<br/>&emsp;&emsp;return this.name +" (a " + this.type + ") is flying"; <br/>} <br/>// Creating Objects and Calling fly method <br/>console.log(new Bird("sweet pea", "huming bird").fly()); <br/>console.log(new Bird("rodger", "eagle").fly());'],subTitle:"",footerText:"",text:""},{title:"Encapsulation",type:"paragraphs",data:["Encapsulation is another OOP-related concept, which illustrates the fact that an object contains (encapsulates) both:  Data (stored in properties) and the means to do something with the data (using methods). One other term that goes together with encapsulation is information hiding. The same thing happens in OOP, when your code uses an object by calling its methods. It doesn't matter if you coded the object yourself or it came from some third party library; your code doesn't need to know how the methods work internally.","In compiled languages, you can't actually read the code that makes an object work. In JavaScript, because it's an interpreted language, you can see the source code, but the concept is still the same\u2014you work with the object's interface, without worrying about its implementation. Another aspect of information hiding is the visibility of methods and properties.  In some languages, objects can have public, private, and protected methods and properties. This categorization defines the level of access the users of the object have. ","For example, only the internal implementation of the object has access to the private methods, while anyone has access to the public ones. In JavaScript, all methods and properties are public, but there are ways to protect the data inside an object and achieve privacy. "],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:['let songPlayer = {<br/>&emsp;&emsp;list: [<br/>&emsp;&emsp;&emsp;{ name: "song1.mp3", media: "http://web.com/song1.mp3" },<br/>&emsp;&emsp;&emsp;{ name: "song2.mp3", media: "http://web.com/song2.mp3" },<br/>&emsp;&emsp;&emsp;{ name: "song3.mp3", media: "http://web.com/song3.mp3" },<br/>&emsp;&emsp;],<br/>&emsp;&emsp;play: function (song) {<br/>&emsp;&emsp;&emsp;// play current song<br/>&emsp;&emsp;&emsp;console.log("Playing", song.name); <br/>&emsp;&emsp;},<br/>&emsp;&emsp;pause: function (song) {<br/>&emsp;&emsp;&emsp;// pause current song<br/>&emsp;&emsp;&emsp;console.log("Pausing", song.name); <br/>&emsp;&emsp;},<br/>&emsp;&emsp;setCurrentSong: function () {<br/>&emsp;&emsp;&emsp;// setting current song<br/>&emsp;&emsp;&emsp;const index = Math.round(Math.random() * (this.list.length - 1));<br/>&emsp;&emsp;&emsp;return index > -1 ? this.list[index] : this.list[0];<br/>&emsp;&emsp;},<br/>};<br/>const song = songPlayer.setCurrentSong();<br/>songPlayer.play(song);'],subTitle:"",footerText:"",text:""},{title:"",type:"paragraphs",data:["One of the main principles with OOP is encapsulation: put all the inner workings of an object inside that object. To implement encapsulation in JavaScript, we have to define the core methods and properties on that object. To do this, we will use the best pattern for encapsulation in JavaScript: the Combination Constructor/Prototype Pattern.","Why Encapsulation? - Whenever we want to create objects with similar functionalities (to use the same methods and properties), we encapsulate the main functionalities in a Function and we use that Function\u2019s constructor to create the objects. This is the essence of encapsulation.","Constructor Property - Every function has a constructor property, and this property points to the constructor of the function. The one disadvantage of overwriting the prototype is that the constructor property no longer points to the prototype, so we have to set it manually."],subTitle:"",footerText:"",text:""},{title:"Inheritance",type:"paragraphs",data:['Inheritance is a very elegant way to reuse code that has already been written. For example, you can have a generic object Person, which has properties such as name and date of birth, and that implements the functionality walk, talk, sleep, eat. Then you figure out that you need an object Programmer. You could re-implement all the methods and properties that Person has, but it would be smarter to just say that Programmer inherits Person, and save yourself some work. The Programmer object only needs to implement more-specific functionality, such as the method "write code", while reusing all of the Person\'s functionality. In classical OOP, classes inherit from other classes, but in JavaScript, because there are no classes, objects inherit from other objects.','When an object inherits from another object, it usually adds new methods to the inherited ones, thus extending the old object. Often the following phrases can be used interchangeably: "B inherits from A" and "B extends A".',"Also, the object that inherited a number of methods, can pick one or more methods and redefine them, customizing them for its own needs. This way the interface stays the same, the method name is the same, but when called on the new object, the method behaves differently. This way of redefining how an inherited method works is known as overriding.","Inheritance in JavaScript - Inheritance allows us to inherit functionality from parent Functions so that we can easily reuse code in our application and extend the functionality of objects. Objects can make use of their inherited functionalities and still have their own specialized functionalities. The best pattern for implementing inheritance in JavaScript is the Parasitic Combination inheritance."],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:["// In Progress"],subTitle:"",footerText:"",text:""},{title:"Aggregation",type:"paragraphs",data:["Combining several objects into a new one is known as aggregation or composition. Aggregation is a powerful way to separate a problem into smaller and more manageable parts (divide and conquer).","When a problem scope is so complex that it's impossible to think about it at a detailed level in its entirety, you can separate the problem into several smaller areas, and possibly then separate each of these into even smaller chunks. This allows you to think about the problem on several levels of abstraction","A personal computer is a very complex object. You cannot think about all the things that need to happen when you start your computer. But you can abstract the problem saying that you need to initialize the objects it consists of: the Monitor object, the Mouse object, the Keyboard object, and so on. Then you can dive deeper into each of the sub-objects. This way you are composing complex objects by assembling reusable parts.","To use another analogy, a Book object could can contain (aggregate) one or more author objects, a publisher object, several chapter objects, a table of contents, and so on."],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:["// In Progress"],subTitle:"",footerText:"",text:""},{title:"Polymorphism",type:"paragraphs",data:['In the example above, we had a Programmer object that inherited all of the methods of the parent Person object. This means that both objects provide a "talk" method, among others.',"Now imagine that somewhere in our code, there's a variable called Bob and it so happens that we don't know if Bob is a Person, or a Programmer object. We can still call the \"talk\" method on the Bob object and the code will work. This ability to call the same method on different objects and have each of them respond in their own way is called polymorphism."],subTitle:"",footerText:"",text:""},{title:"",type:"code",data:["// In Progress"],subTitle:"",footerText:"",text:""},{title:"OOP Summary",type:"list",data:["Objects - Bob is a man (an object).","Properties - Bob's date of birth is June 1st, 1980, gender: male, hair: black.","Methods - Bob can eat, sleep, drink, dream, talk and calculate his age.","Class (in classical OOP) - Bob is an instance of class Programmer.","Prototype (in prototypal OOP) - Bob is based on another object, called Programmer.","Encapsulation (information hiding) - Bob holds data (such as birth date) and methods that work with the data (such as calculate age). We don't need to know how the calculation method works internally. The object might have some private data, such as the number of days in February in a leap year, we don't know, nor do we want to know.","Aggregation (composition) - Bob is part of a Web Dev Team object, together with Jill, a Designer object and Jack, a Project Manager object.","Inheritance - Designer, Project Manager and Programmer are all based on and extend a Person object.","Polymorphism, (method overriding) - You can call the methods Bob:talk, Jill:talk and Jack:talk and they'll all work fine, albeit producing different results (Bob will probably talk more about performance, Jill about beauty and Jack about deadlines). Each object inherited the method talk from Person and customized it."],subTitle:"",footerText:"",text:""}]}return e.ngInjectableDef=o.Fb({factory:function(){return new e},token:e,providedIn:"root"}),e}(),l=function(){function e(e){this.oopsService=e,this.pageTitle="Object-Oriented Programming"}return e.prototype.ngOnInit=function(){this.content=this.oopsService.content},e}(),i=function(){return function(){}}(),s=n("pMnS"),r=n("21Lb"),c=n("OzfB"),u=n("Fzqc"),p=n("Ip0R"),h=n("8ef6"),b=n("XpDt"),m=n("WHjn"),d=n("nlns"),f=n("57tH"),y=n("C/7A"),g=n("toH5"),w=n("uilG"),x=n("aLe/"),j=n("Ln9c"),k=n("dJpi"),v=o.nb({encapsulation:2,styles:[],data:{}});function T(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,1,"h3",[],null,null,null,null,null)),(e()(),o.Cb(1,null,["",""]))],null,function(e,t){e(t,1,0,null==t.parent.parent.context.$implicit?null:t.parent.parent.context.$implicit.title)})}function P(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,1,"div",[],null,null,null,null,null)),(e()(),o.Cb(1,null,[" "," "]))],null,function(e,t){e(t,1,0,t.context.$implicit)})}function O(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,6,"article",[["fxLayout","column"],["fxLayoutGap","10px"]],null,null,null,null,null)),o.ob(1,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(2,1720320,null,0,r.d,[o.k,o.z,u.b,c.i,[2,r.j],c.f],{fxLayoutGap:[0,"fxLayoutGap"]},null),(e()(),o.eb(16777216,null,null,1,null,T)),o.ob(4,16384,null,0,p.j,[o.O,o.L],{ngIf:[0,"ngIf"]},null),(e()(),o.eb(16777216,null,null,1,null,P)),o.ob(6,278528,null,0,p.i,[o.O,o.L,o.s],{ngForOf:[0,"ngForOf"]},null)],function(e,t){e(t,1,0,"column"),e(t,2,0,"10px"),e(t,4,0,null==t.parent.context.$implicit?null:t.parent.context.$implicit.title),e(t,6,0,null==t.parent.context.$implicit?null:t.parent.context.$implicit.data)},null)}function L(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,2,"app-code-view",[["fxLayout","row"]],null,null,null,h.b,h.a)),o.ob(1,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(2,638976,null,0,b.a,[],{content:[0,"content"]},null)],function(e,t){e(t,1,0,"row"),e(t,2,0,t.parent.context.$implicit)},null)}function I(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,1,"app-list-view",[],null,null,null,m.b,m.a)),o.ob(1,114688,null,0,d.a,[],{content:[0,"content"]},null)],function(e,t){e(t,1,0,t.parent.context.$implicit)},null)}function F(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,8,"div",[["fxLayout","column"],["fxLayoutGap","10px"]],[[8,"id",0]],null,null,null,null)),o.ob(1,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(2,1720320,null,0,r.d,[o.k,o.z,u.b,c.i,[2,r.j],c.f],{fxLayoutGap:[0,"fxLayoutGap"]},null),(e()(),o.eb(16777216,null,null,1,null,O)),o.ob(4,16384,null,0,p.j,[o.O,o.L],{ngIf:[0,"ngIf"]},null),(e()(),o.eb(16777216,null,null,1,null,L)),o.ob(6,16384,null,0,p.j,[o.O,o.L],{ngIf:[0,"ngIf"]},null),(e()(),o.eb(16777216,null,null,1,null,I)),o.ob(8,16384,null,0,p.j,[o.O,o.L],{ngIf:[0,"ngIf"]},null)],function(e,t){e(t,1,0,"column"),e(t,2,0,"10px"),e(t,4,0,"paragraphs"===(null==t.context.$implicit?null:t.context.$implicit.type)),e(t,6,0,"code"===(null==t.context.$implicit?null:t.context.$implicit.type)),e(t,8,0,"list"===(null==t.context.$implicit?null:t.context.$implicit.type))},function(e,t){e(t,0,0,null==t.context.$implicit?null:t.context.$implicit.title)})}function B(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,23,"div",[["class","main-page"],["fxLayout","column"]],null,null,null,null,null)),o.ob(1,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),(e()(),o.pb(2,0,null,null,4,"app-top-menu",[["fxFlex","80px"],["fxLayout","row"],["fxLayoutAlign","space-between center"]],null,null,null,f.b,f.a)),o.ob(3,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(4,671744,null,0,r.b,[o.k,c.i,[2,r.i],c.f],{fxLayoutAlign:[0,"fxLayoutAlign"]},null),o.ob(5,671744,null,0,r.a,[o.k,c.i,c.e,r.h,c.f],{fxFlex:[0,"fxFlex"]},null),o.ob(6,114688,null,0,y.a,[g.a],null,null),(e()(),o.pb(7,0,null,null,16,"div",[["class","main-content"],["fxFlex","100%"],["fxLayout","row"],["fxLayoutGap","20px"]],null,null,null,null,null)),o.ob(8,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(9,1720320,null,0,r.d,[o.k,o.z,u.b,c.i,[2,r.j],c.f],{fxLayoutGap:[0,"fxLayoutGap"]},null),o.ob(10,671744,null,0,r.a,[o.k,c.i,c.e,r.h,c.f],{fxFlex:[0,"fxFlex"]},null),(e()(),o.pb(11,0,null,null,9,"section",[["fxFlex","70%"],["fxLayout","column"],["fxLayoutGap","16px"]],null,null,null,null,null)),o.ob(12,671744,null,0,r.c,[o.k,c.i,[2,r.k],c.f],{fxLayout:[0,"fxLayout"]},null),o.ob(13,1720320,null,0,r.d,[o.k,o.z,u.b,c.i,[2,r.j],c.f],{fxLayoutGap:[0,"fxLayoutGap"]},null),o.ob(14,671744,null,0,r.a,[o.k,c.i,c.e,r.h,c.f],{fxFlex:[0,"fxFlex"]},null),(e()(),o.pb(15,0,null,null,1,"h2",[],null,null,null,null,null)),(e()(),o.Cb(16,null,["",""])),(e()(),o.pb(17,0,null,null,3,"perfect-scrollbar",[],[[2,"ps-show-limits",null],[2,"ps-show-active",null]],null,null,w.b,w.a)),o.ob(18,507904,null,0,x.b,[o.z,o.h,o.B],null,null),(e()(),o.eb(16777216,null,0,1,null,F)),o.ob(20,278528,null,0,p.i,[o.O,o.L,o.s],{ngForOf:[0,"ngForOf"]},null),(e()(),o.pb(21,0,null,null,2,"app-aside-summary",[["fxFlex","30%"]],null,null,null,j.b,j.a)),o.ob(22,671744,null,0,r.a,[o.k,c.i,c.e,r.h,c.f],{fxFlex:[0,"fxFlex"]},null),o.ob(23,114688,null,0,k.a,[g.a],{content:[0,"content"],pagePath:[1,"pagePath"]},null)],function(e,t){var n=t.component;e(t,1,0,"column"),e(t,3,0,"row"),e(t,4,0,"space-between center"),e(t,5,0,"80px"),e(t,6,0),e(t,8,0,"row"),e(t,9,0,"20px"),e(t,10,0,"100%"),e(t,12,0,"column"),e(t,13,0,"16px"),e(t,14,0,"70%"),e(t,18,0),e(t,20,0,n.content),e(t,22,0,"30%"),e(t,23,0,n.content,"oops-concepts")},function(e,t){e(t,16,0,t.component.pageTitle),e(t,17,0,o.yb(t,18).autoPropagation,o.yb(t,18).scrollIndicators)})}function J(e){return o.Db(0,[(e()(),o.pb(0,0,null,null,1,"app-oops",[],null,null,null,B,v)),o.ob(1,114688,null,0,l,[a],null,null)],function(e,t){e(t,1,0)},null)}var C=o.lb("app-oops",l,J,{},{},[]),S=n("hUWP"),$=n("3pJQ"),A=n("V9q+"),D=n("FpXt"),G=n("ZYCi");n.d(t,"OopsModuleNgFactory",function(){return z});var z=o.mb(i,[],function(e){return o.vb([o.wb(512,o.j,o.Z,[[8,[s.a,C]],[3,o.j],o.x]),o.wb(4608,p.l,p.k,[o.u,[2,p.x]]),o.wb(5120,o.b,function(e,t){return[c.j(e,t)]},[p.c,o.B]),o.wb(4608,g.a,g.a,[]),o.wb(4608,a,a,[]),o.wb(1073742336,p.b,p.b,[]),o.wb(1073742336,c.c,c.c,[]),o.wb(1073742336,u.a,u.a,[]),o.wb(1073742336,r.g,r.g,[]),o.wb(1073742336,S.b,S.b,[]),o.wb(1073742336,$.a,$.a,[]),o.wb(1073742336,A.a,A.a,[[2,c.g],o.B]),o.wb(1073742336,x.d,x.d,[]),o.wb(1073742336,D.a,D.a,[]),o.wb(1073742336,G.l,G.l,[[2,G.q],[2,G.k]]),o.wb(1073742336,i,i,[]),o.wb(256,x.a,D.b,[]),o.wb(1024,G.i,function(){return[[{path:"",component:l}]]},[])])})}}]);